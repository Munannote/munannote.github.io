<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>科学使用UML建图指南</title>
    <url>/2019/12/29/a-guide-to-scientific-uml-mapping/</url>
    <content><![CDATA[<h2 id="1-UML是什么？"><a href="#1-UML是什么？" class="headerlink" title="1. UML是什么？"></a>1. UML是什么？</h2><p>UML，全称为统一建模语言(Unified Modeling Language)，用图形化、可视化来简易表达复杂的代码，在程序设计架构中经常使用。<br>我们今天就来分享下如何科学的使用UML建图。</p>
<h2 id="2-UML工具使用"><a href="#2-UML工具使用" class="headerlink" title="2. UML工具使用"></a>2. UML工具使用</h2><p>支持UML建图的工具很多，笔者试用了Mac下众多软件，从易用性、功能强大灯方面出发，推荐StarUML来作为主力见图工具。</p>
<h4 id="2-1-安装破解"><a href="#2-1-安装破解" class="headerlink" title="2.1 安装破解"></a>2.1 安装破解</h4><p>下载地址：<a href="http://staruml.io/" target="_blank" rel="noopener">http://staruml.io/</a><br>安装成功后，可以使用如下教程破解。</p>
<ul>
<li><p>安装npm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装asar</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install asar -g</span><br></pre></td></tr></table></figure></li>
<li><p>进入Resources目录 <code>~/Applications/StarUML.app/Contents/Resources</code></p>
</li>
<li><p>解压缩文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">asar extract app.asar app</span><br></pre></td></tr></table></figure></li>
<li><p>修改文件<code>app/src/engine/license-manager.js</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">checkLicenseValidity () &#123;</span><br><span class="line">    <span class="keyword">this</span>.小组().then(() =&gt; &#123;</span><br><span class="line">      setStatus(<span class="keyword">this</span>, <span class="keyword">true</span>)</span><br><span class="line">    &#125;, () =&gt; &#123;</span><br><span class="line">      setStatus(<span class="keyword">this</span>, <span class="keyword">true</span>)</span><br><span class="line">      <span class="comment">// UnregisteredDialog.showDialog()</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>重新打包app文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">asar pack app app.asar</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-UML常用关系"><a href="#3-UML常用关系" class="headerlink" title="3. UML常用关系"></a>3. UML常用关系</h2><p>类之间的关系有继承关系，实现关系，依赖关系，关联关系，聚合关系，组合关系。</p>
<h4 id="3-1-依赖关系（Dependency）"><a href="#3-1-依赖关系（Dependency）" class="headerlink" title="3.1 依赖关系（Dependency）"></a>3.1 依赖关系（Dependency）</h4><p>表示使用关系，即A类的某个方法的参数是B类，B类在A类中都是以局部变量的形式存在的。<br>A类中有B类型的局部变量，A类依赖于B类，A仅仅是用到了B。<br>A use B，A也可以不使用B，A对象没使用某个方法的时候，就可以不持有B。</p>
<p><strong>使用方式：</strong></p>
<ul>
<li>A类是B类方法中的一个参数</li>
<li>A类是B类中某种方法的局部变量</li>
<li>A类向B类发送消息，从而影响B类发生变化</li>
</ul>
<p><strong>表示方式：</strong></p>
<ul>
<li>虚线：虚线表示依赖，关系较弱，A only use B。</li>
<li>箭头：A使用了B，则A箭头指向B。</li>
</ul>
<p><strong>代码示例：</strong><br><img src="media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-12-29%2013.56.13-1.png" alt="屏幕快照 2019-12-29 13.56.13"></p>
<h4 id="3-2-关联关系（Association）"><a href="#3-2-关联关系（Association）" class="headerlink" title="3.2 关联关系（Association）"></a>3.2 关联关系（Association）</h4><p>类与类之间最常见简单的关系，A类中持有了B类的引用，就说明A类和B类发生了关联关系。<br>A has B。B作为组员变量，一旦new A，则A对象必然有持有B。<br>关联可以是一对一，一对多，多对一，多对多等各种关系。（1:1 1:n）</p>
<p><strong>使用方式：</strong></p>
<ul>
<li>在A类中有一个组员变量，变量的类型是B类。</li>
</ul>
<p><strong>表示方式：</strong></p>
<ul>
<li>实线：稳定的相关联，有A就产生了B，用实线表示。</li>
<li>箭头：A持有B，A指向B。</li>
</ul>
<p><strong>代码示例：</strong><br><img src="media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-12-29%2013.59.26.png" alt="屏幕快照 2019-12-29 13.59.26"></p>
<h4 id="3-3-泛化、继承关系（Generalization）"><a href="#3-3-泛化、继承关系（Generalization）" class="headerlink" title="3.3 泛化、继承关系（Generalization）"></a>3.3 泛化、继承关系（Generalization）</h4><p>表示继承关系, 表示类/接口对父类/接口的功能扩展。<br><strong>使用方式：</strong></p>
<ul>
<li>java语法中的<code>extends</code>, 用来扩展父类或父接口的功能。</li>
</ul>
<p><strong>表示方式：</strong></p>
<ul>
<li>实线：强关联。</li>
<li>空心三角形：箭头指向父类或父接口。</li>
</ul>
<p><strong>示例：</strong><br><img src="media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-12-29%2014.01.09.png" alt="屏幕快照 2019-12-29 14.01.09"></p>
<h4 id="3-4-接口实现关系（Interface-Realization）"><a href="#3-4-接口实现关系（Interface-Realization）" class="headerlink" title="3.4 接口实现关系（Interface Realization）"></a>3.4 接口实现关系（Interface Realization）</h4><p>是一种类与接口的关系，表示类是接口所有特征和行为的实现，将接口的方法实现。<br><strong>使用方式：</strong></p>
<ul>
<li>java语法中的<code>implements</code>。</li>
</ul>
<p><strong>表示方式：</strong></p>
<ul>
<li>虚线：相较于泛化继承来说，关系较弱。一个类可以实现多个接口。</li>
<li>空心三角箭头：箭头指向接口。</li>
</ul>
<p><strong>示例：</strong><br><img src="https://github.com/Munannote/image/blob/master/15775973329413.jpg?raw=true" alt=""><br><img src="media/15775973329413.jpg" alt=""></p>
<h4 id="3-5-聚合关系（Aggregation）"><a href="#3-5-聚合关系（Aggregation）" class="headerlink" title="3.5 聚合关系（Aggregation）"></a>3.5 聚合关系（Aggregation）</h4><p>它是一种弱关联，整体和部分可以独立存在。</p>
<p><strong>使用方式：</strong></p>
<ul>
<li>它们没有必然的关联，可以称为聚合。<br>  例如：小组和组员的关系，组员可以退出小组去参加另外一个。不能说是删除该小组，就把该小组的组员全部删除。小组可以拥有任意一个组员，每个组员也可以参与任意一个小组，属于数据库级联操作。</li>
<li>每个小组不唯一拥有组员。</li>
</ul>
<p><strong>表示方式：</strong></p>
<ul>
<li>实线：稳定。</li>
<li>空心菱形：小组不一定拥有组员，指向整体。</li>
</ul>
<p><strong>示例：</strong><br><img src="media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-12-29%2013.41.51.png" alt="屏幕快照 2019-12-29 13.41.51"></p>
<h4 id="3-6-组合关系（Composition）"><a href="#3-6-组合关系（Composition）" class="headerlink" title="3.6 组合关系（Composition）"></a>3.6 组合关系（Composition）</h4><p>组合是一种强关联，整体和部分不可分割，不能独立存在。</p>
<p><strong>使用方式：</strong></p>
<ul>
<li>学生和学生证来说，假如某个学生退学，不再属于这个学校，那么可以考虑将该学生信息删除，删除的时候，学生对应的学生证信息也会被删除，在此处可以加级联删除。</li>
<li>学生证唯一被学生拥有，因为学生证属于某个学生专有的信息，学生不存在了，学生证又不能让他人使用，因此是一种强关联，可以称为组合。</li>
</ul>
<p><strong>表示方式：</strong></p>
<ul>
<li>实线：稳定。</li>
<li>实心菱形：学生证唯一被学生拥有，学生不存在了，则学生证也应该删除。</li>
</ul>
<p><strong>示例：</strong><br><img src="media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-12-29%2013.40.18.png" alt="屏幕快照 2019-12-29 13.40.18"></p>
]]></content>
      <categories>
        <category>九州之理</category>
      </categories>
  </entry>
  <entry>
    <title>我的三次里程碑</title>
    <url>/2019/12/12/my-three-milestones/</url>
    <content><![CDATA[<p>打小记事起，我就知道自己不是一个聪明的人。<br>长相传统、不擅娱乐、言语无趣、说话易得罪人，活脱脱一个木讷呆板淌着鼻涕的小男孩。<br>好在性格乖巧，听大人的话认真学习；加上脑袋灵光，在大西北黄土高原上三面环沟十八线小山村里成绩尚可。<br>成绩优秀，理所当然的有一系列的光环：奖状贴了一墙；村里长辈眼中的“独苗”；同学认可尊重；在物质匮乏的年代搜集到金庸全集…如此种种不一而足。<br>当然，还有个最大的特点–去书中探索来满足自己的好奇心。<br>我深知自己不聪明，周围也大多蠢笨之人，只能靠书本来获取知识，完成自己的原始知识架构。</p>
<p>再回首，踽踽独行的脚印隐然可见，每一步都走的踉踉跄跄。<br>思维价值观方面，我有着三次升华，三次里程碑式的转变。</p>
<h4 id="1-知识体系初成"><a href="#1-知识体系初成" class="headerlink" title="1. 知识体系初成"></a>1. 知识体系初成</h4><p>我的第一次升华在大学毕业后一两年：知识体系搭建成功。</p>
<p>犹记大学时代闲逛天涯，帖子下边有人盖楼辩论，双方你来我往，气氛好不热烈。<br>神奇的是，我发现两方的观点都是正确的，每一条回复都那么的有哲理，完完全全的跟着别人的思维游走。<br>常听说人要独立思考，但是却不知道如何才算独立思考。</p>
<p>直到某一天，我突然发现：在生活中、社会上发生的事物，我都能用自己的见解去分析，并且结论基本正确。<br>原来，通过多年阅读庞杂书籍，我的知识体系基本搭建成功，成网状结构生长在脑海中。<br>遇到新的知识，用当前的知识体系判断其是否正确，洞察内在逻辑。有用的整理吸收，无用的随手摒弃。<br>知识体系依然在成长，作出的决策可以趋于完美。</p>
<p>习得屠龙术，世间万物不迷茫。</p>
<p>在生活中，潜移默化的使用了以下几种方式，日积月累，方得始成。</p>
<ul>
<li><strong>主题无关细小发现</strong>：在别人讲事情的时候，善于从一些与主题无关的细节发现与主题无关的真理。</li>
<li><strong>分析身边(人)问题</strong>：将身边(人)发生的事情，进行复盘。时间倒退，如何决策会更为有利。</li>
<li><strong>阅读大量杂书</strong>：常年泡在天涯知乎等思辨论坛，阅读大量有用无用杂书，从中自己窥试真理。</li>
<li><strong>归纳中心思想</strong>：将事物从具体抽离，归纳出抽象规律真理，纳入体系。</li>
<li><strong>超越规则束缚</strong>：从不care各种规则，按照自己内心的逻辑出发，处理事物。</li>
<li><strong>思考他人动机</strong>：假定所有人都是理性人，思考别人这样做的思维依据，内在逻辑，能否为我所用。</li>
</ul>
<h4 id="2-内心平和"><a href="#2-内心平和" class="headerlink" title="2. 内心平和"></a>2. 内心平和</h4><p>我的第二次升华是内心平和：对于个人成功、他人期许、社会钳制，都能安然的放在一边，心安处为吾乡。</p>
<p>面对问题，不会第一时间陷入烦躁，而是潜意识中开启大脑分析模式：问题的实质是什么？预期损失什么？如何损失最小化？最优解决方案是什么？<br>依靠快速理清思路，快速解决问题，面对问题有了一定的免疫力。<br>没有什么问题能难倒我，能难倒我的问题都不是当下立即要解决的。</p>
<p>所以，内心渐渐趋于平和，不乱方寸。<br>内心平和之后，发现前方万里晴空，人生不再阴霾。<br>抛却了强加在人身上有形无形的枷锁，摆脱了世俗偏见，依靠大脑的理性做决策，不会再因为不通晓规则，不知所措而惶恐。<br>遥看前路，知晓行动之梯，唯恨自己蠢笨、懒惰，无法快速达到梦想之地。<br>也不再焦虑，未来就在那儿，不很遥远。每一步都走的踏实，进一步有一步的欢喜。</p>
<p>心不惧，方能安。心安之，则情绪稳定，能力稳定发挥。</p>
<h4 id="3-学会输出"><a href="#3-学会输出" class="headerlink" title="3. 学会输出"></a>3. 学会输出</h4><p>最近，我发现一个现象：遇到问题，我可以快速分析出问题核心本质、解决方案是什么，但是总没有洋洋洒洒上千字描述的清晰明了，读起来爽快。<br>遂决定了，我需要输出。</p>
<p>头脑风暴了一些输出的优点：</p>
<ul>
<li>基于知识体系的输出，质量下限较高，不会因内容低劣而误导他人。</li>
<li>输出可以整理自己的思路，有利于思维敏捷。</li>
<li>输出可以快速发现输入的盲点，查漏补缺，补全体系。</li>
<li>长期输出，必须高质量的输入，提升总体输入效率。</li>
<li>输出有利于提升自我影响力。</li>
</ul>
]]></content>
      <categories>
        <category>记一忘三二</category>
      </categories>
  </entry>
</search>
